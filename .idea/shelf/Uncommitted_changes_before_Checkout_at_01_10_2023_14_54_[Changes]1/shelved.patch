Index: src/database/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from datetime import datetime\r\nimport enum\r\n\r\nimport uuid\r\nfrom sqlalchemy.dialects.postgresql import UUID\r\n\r\nfrom sqlalchemy import Column, String, DateTime, ForeignKey, Boolean, Enum, Integer, func, Float, Table\r\nfrom sqlalchemy.orm import declarative_base, relationship\r\nfrom sqlalchemy.sql.schema import Table\r\n\r\n\r\nBase = declarative_base()\r\n\r\n\r\nclass Role(enum.Enum):\r\n    client = 'client'\r\n    admin = 'admin'\r\n\r\n\r\nclass User(Base):\r\n    __tablename__ = \"users\"\r\n\r\n    user_id = Column(Integer, primary_key=True)\r\n    user_role = Column('role', Enum(Role), default=Role.client)\r\n    password = Column(String(255), nullable=False)\r\n    name = Column(String(50))\r\n    email = Column(String(250), nullable=False, unique=True)\r\n    phone = Column(String(255))\r\n    avatar = Column(String(255), nullable=True)\r\n    refresh_token = Column(String(255), nullable=True)\r\n    confirmed = Column(Boolean, default=False)\r\n    banned = Column(Boolean, default=False)\r\n    created_at = Column(DateTime, default=datetime.now)\r\n    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)\r\n\r\n    def __str__(self):\r\n        return f\"{self.name}\"\r\n\r\n\r\nclass Admin(Base):\r\n    __tablename__ = 'admin'\r\n    admin_id = Column(Integer, primary_key=True, index=True)\r\n    user_id = Column(Integer, ForeignKey('users.user_id'), nullable=False)\r\n    is_active = Column(Boolean, default=False)\r\n    last_visit = Column(DateTime, default=func.now())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/database/models.py b/src/database/models.py
--- a/src/database/models.py	
+++ b/src/database/models.py	
@@ -39,7 +39,41 @@
 
 class Admin(Base):
     __tablename__ = 'admin'
+
     admin_id = Column(Integer, primary_key=True, index=True)
     user_id = Column(Integer, ForeignKey('users.user_id'), nullable=False)
     is_active = Column(Boolean, default=False)
     last_visit = Column(DateTime, default=func.now())
+
+
+class PDFfile(Base):
+    __tablename__ = 'pdffiles'
+
+    id = Column(Integer, primary_key=True)
+    filename = Column(String(255), nullable=False, unique=False)
+    context = Column(String, nullable=True)
+    user_id = Column(Integer, ForeignKey('users.user_id', ondelete='CASCADE'))
+    created_at = Column(DateTime, default=func.now())
+    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
+    history = relationship('ChatHistory', backref='file')
+
+
+class Chat(Base):
+    __tablename__ = 'chat'
+
+    id = Column(Integer, primary_key=True)
+    file_id = Column(Integer, ForeignKey('pdffiles.id', ondelete='CASCADE'))
+    user_id = Column(Integer, ForeignKey('users.user_id', ondelete='CASCADE'))
+    question = Column(String)
+    created_at = Column(DateTime, default=func.now())
+
+
+class ChatHistory(Base):
+    __tablename__ = 'chat_history'
+
+    id = Column(Integer, primary_key=True)
+    file_id = Column(Integer, ForeignKey('pdffiles.id', ondelete='CASCADE'))
+    question = Column(String)
+    answer = Column(String)
+    created_at = Column(DateTime, default=func.now())
+
Index: migrations/versions/931ef5f12217_init.py
===================================================================
diff --git a/migrations/versions/931ef5f12217_init.py b/migrations/versions/931ef5f12217_init.py
deleted file mode 100644
--- a/migrations/versions/931ef5f12217_init.py	
+++ /dev/null	
@@ -1,56 +0,0 @@
-"""'Init'
-
-Revision ID: 931ef5f12217
-Revises: 
-Create Date: 2023-09-28 21:35:01.534093
-
-"""
-from typing import Sequence, Union
-
-from alembic import op
-import sqlalchemy as sa
-
-
-# revision identifiers, used by Alembic.
-revision: str = '931ef5f12217'
-down_revision: Union[str, None] = None
-branch_labels: Union[str, Sequence[str], None] = None
-depends_on: Union[str, Sequence[str], None] = None
-
-
-def upgrade() -> None:
-    # ### commands auto generated by Alembic - please adjust! ###
-    op.create_table('users',
-    sa.Column('user_id', sa.Integer(), nullable=False),
-    sa.Column('role', sa.Enum('client', 'admin', name='role'), nullable=True),
-    sa.Column('password', sa.String(length=255), nullable=False),
-    sa.Column('name', sa.String(length=50), nullable=True),
-    sa.Column('email', sa.String(length=250), nullable=False),
-    sa.Column('phone', sa.String(length=255), nullable=True),
-    sa.Column('avatar', sa.String(length=255), nullable=True),
-    sa.Column('refresh_token', sa.String(length=255), nullable=True),
-    sa.Column('confirmed', sa.Boolean(), nullable=True),
-    sa.Column('banned', sa.Boolean(), nullable=True),
-    sa.Column('created_at', sa.DateTime(), nullable=True),
-    sa.Column('updated_at', sa.DateTime(), nullable=True),
-    sa.PrimaryKeyConstraint('user_id'),
-    sa.UniqueConstraint('email')
-    )
-    op.create_table('admin',
-    sa.Column('admin_id', sa.Integer(), nullable=False),
-    sa.Column('user_id', sa.Integer(), nullable=False),
-    sa.Column('is_active', sa.Boolean(), nullable=True),
-    sa.Column('last_visit', sa.DateTime(), nullable=True),
-    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
-    sa.PrimaryKeyConstraint('admin_id')
-    )
-    op.create_index(op.f('ix_admin_admin_id'), 'admin', ['admin_id'], unique=False)
-    # ### end Alembic commands ###
-
-
-def downgrade() -> None:
-    # ### commands auto generated by Alembic - please adjust! ###
-    op.drop_index(op.f('ix_admin_admin_id'), table_name='admin')
-    op.drop_table('admin')
-    op.drop_table('users')
-    # ### end Alembic commands ###
Index: migrations/versions/6f9feb2a2afd_init.py
===================================================================
diff --git a/migrations/versions/6f9feb2a2afd_init.py b/migrations/versions/6f9feb2a2afd_init.py
deleted file mode 100644
--- a/migrations/versions/6f9feb2a2afd_init.py	
+++ /dev/null	
@@ -1,54 +0,0 @@
-"""Init
-
-Revision ID: 6f9feb2a2afd
-Revises: 
-Create Date: 2023-09-28 22:13:33.195077
-
-"""
-from alembic import op
-import sqlalchemy as sa
-
-
-# revision identifiers, used by Alembic.
-revision = '6f9feb2a2afd'
-down_revision = None
-branch_labels = None
-depends_on = None
-
-
-def upgrade() -> None:
-    # ### commands auto generated by Alembic - please adjust! ###
-    op.create_table('users',
-    sa.Column('user_id', sa.Integer(), nullable=False),
-    sa.Column('role', sa.Enum('client', 'admin', name='role'), nullable=True),
-    sa.Column('password', sa.String(length=255), nullable=False),
-    sa.Column('name', sa.String(length=50), nullable=True),
-    sa.Column('email', sa.String(length=250), nullable=False),
-    sa.Column('phone', sa.String(length=255), nullable=True),
-    sa.Column('avatar', sa.String(length=255), nullable=True),
-    sa.Column('refresh_token', sa.String(length=255), nullable=True),
-    sa.Column('confirmed', sa.Boolean(), nullable=True),
-    sa.Column('banned', sa.Boolean(), nullable=True),
-    sa.Column('created_at', sa.DateTime(), nullable=True),
-    sa.Column('updated_at', sa.DateTime(), nullable=True),
-    sa.PrimaryKeyConstraint('user_id'),
-    sa.UniqueConstraint('email')
-    )
-    op.create_table('admin',
-    sa.Column('admin_id', sa.Integer(), nullable=False),
-    sa.Column('user_id', sa.Integer(), nullable=False),
-    sa.Column('is_active', sa.Boolean(), nullable=True),
-    sa.Column('last_visit', sa.DateTime(), nullable=True),
-    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
-    sa.PrimaryKeyConstraint('admin_id')
-    )
-    op.create_index(op.f('ix_admin_admin_id'), 'admin', ['admin_id'], unique=False)
-    # ### end Alembic commands ###
-
-
-def downgrade() -> None:
-    # ### commands auto generated by Alembic - please adjust! ###
-    op.drop_index(op.f('ix_admin_admin_id'), table_name='admin')
-    op.drop_table('admin')
-    op.drop_table('users')
-    # ### end Alembic commands ###
Index: src/repository/pdffiles.py
===================================================================
diff --git a/src/repository/pdffiles.py b/src/repository/pdffiles.py
new file mode 100644
--- /dev/null	
+++ b/src/repository/pdffiles.py	
@@ -0,0 +1,20 @@
+from typing import List
+import logging
+
+from sqlalchemy import select
+from sqlalchemy.ext.asyncio import AsyncSession
+from src.database.models import PDFfile
+
+from src.schemas.pdffile_schemas import PdfFileResponse
+
+
+async def get_by_user(user_id: int, skip: int, limit: int, db: AsyncSession):
+
+    files = await db.execute(
+        select(PDFfile)
+        .where(PDFfile.user_id == user_id)
+        .offset(skip)
+        .limit(limit)
+    )
+
+    return files.scalars().all()
Index: src/conf/messages.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class AuthMessages:\r\n    account_already_exists = \"Account already exists\"\r\n    invalid_email = \"Invalid email\"\r\n    email_not_confirmed = \"Email not confirmed\"\r\n    invalid_password = \"Invalid password\"\r\n    invalid_refresh_token = \"Invalid refresh token\"\r\n    verification_error = \"Verification error\"\r\n    your_email_is_already_confirmed = \"Your email is already confirmed\"\r\n    check_your_email_for_confirmation = \"Check your email for confirmation\"\r\n    invalid_scope_for_token = \"Invalid scope for token\"\r\n    could_not_validate_credentials = \"Could not validate credentials\"\r\n    invalid_token_for_email_verification = \"Invalid token for email verification\"\r\n    banned = \"You are banned from this app!\"\r\n\r\n\r\nclass RolesMessages:\r\n    operation_forbidden = \"Operation forbidden\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/conf/messages.py b/src/conf/messages.py
--- a/src/conf/messages.py	
+++ b/src/conf/messages.py	
@@ -15,3 +15,9 @@
 
 class RolesMessages:
     operation_forbidden = "Operation forbidden"
+
+
+class FileMessages:
+    file_is_not_valid = "File is not valid"
+    not_pdf = "Only PDF file can be downloaded"
+    add_pdf = "Upload the PDF file"
Index: src/routes/chat_history.py
===================================================================
diff --git a/src/routes/chat_history.py b/src/routes/chat_history.py
new file mode 100644
--- /dev/null	
+++ b/src/routes/chat_history.py	
@@ -0,0 +1,6 @@
+from fastapi import APIRouter, HTTPException, status
+
+
+router = APIRouter(prefix="/chat_history", tags=['chat_history'])
+
+
Index: src/routes/chat.py
===================================================================
diff --git a/src/routes/chat.py b/src/routes/chat.py
new file mode 100644
--- /dev/null	
+++ b/src/routes/chat.py	
@@ -0,0 +1,7 @@
+from fastapi import APIRouter, HTTPException, status
+
+
+router = APIRouter(prefix="/chat", tags=['chat'])
+
+
+
Index: src/routes/pdffiles.py
===================================================================
diff --git a/src/routes/pdffiles.py b/src/routes/pdffiles.py
new file mode 100644
--- /dev/null	
+++ b/src/routes/pdffiles.py	
@@ -0,0 +1,57 @@
+from io import BytesIO
+
+from PyPDF2 import PdfReader
+from fastapi import APIRouter, HTTPException, status, UploadFile
+
+from src.conf.messages import FileMessages
+
+router = APIRouter(prefix="/pdffile", tags=['pdffile'])
+
+
+@router.post("/upload", status_code=status.HTTP_201_CREATED)
+async def get_txt_from_pdf(file: UploadFile) -> dict:
+
+    try:
+        file_name, extension = file.filename.split('.')
+        if extension != 'pdf':
+            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=FileMessages.not_pdf)
+
+        file_content = await file.read()
+        pdf_file = BytesIO(file_content)
+        pdf_reader = PdfReader(pdf_file)
+        text = ''
+
+        for page in range(len(pdf_reader.pages)):
+            text += pdf_reader.pages[page].extract_text()
+
+        with open(f"{file_name}.txt", 'w', encoding="utf-8") as txt:
+            txt.write(text)
+
+        return {'filename': file_name, 'text': text}
+
+    except Exception:
+        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=FileMessages.add_pdf)
+
+
+# @router.post("/upload/")
+# async def upload_file(file: UploadFile = Form(...)):
+#
+#     if file.filename.endswith(".pdf"):
+#         # створюємо папку 'uploads', якщо її немає
+#         Path('uploads').mkdir(exist_ok=True)
+#
+#         # шлях до нового файлу
+#         filepath = Path('uploads') / file.filename
+#
+#         # зберігаємо файл
+#         with filepath.open('wb') as buffer:
+#             shutil.copyfileobj(file.file, buffer)
+#
+#         # конвертація PDF до тексту
+#         extracted_text = pdf_to_text(filepath)
+#
+#         return {"filename": file.filename, "content_type": file.content_type, "extracted_text": extracted_text}
+#     else:
+#         raise HTTPException(status_code=400, detail="Invalid file type")
+#
+#
\ No newline at end of file
Index: src/schemas/chat_history_schemas.py
===================================================================
diff --git a/src/schemas/chat_history_schemas.py b/src/schemas/chat_history_schemas.py
new file mode 100644
--- /dev/null	
+++ b/src/schemas/chat_history_schemas.py	
@@ -0,0 +1,17 @@
+from datetime import datetime
+
+from pydantic import BaseModel
+
+
+class HistoryModel(BaseModel):
+    fil_id: int
+    question: str
+    answer: str
+
+
+class HistoryResponse(BaseModel):
+    id: int
+    created_at: datetime
+
+    class Config:
+        orm_mode = True
